# Configuration for Alacritty, the GPU enhanced terminal emulator.
env:
  TERM: 'xterm-256color'

window:
  dimensions:
    columns: 157
    lines: 53
  padding:
    x: 12
    y: 12
  position:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: full

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  #startup_mode: Maximized
  title: Alacritty
  dynamic_title: true

scrolling:
  history: 10000

# Font configuration
font:
  normal:
    family: Hack Nerd Font
    style: Regular
  bold:
    family: Hack Nerd Font
  italic:
    family: Hack Nerd Font
    style: Italic

  bold_italic:
    family: Hack Nerd Font
    style: Bold Italic
  size: 12.0

  offset:
    x: 0
    y: 0
  glyph_offset:
    x: 0
    y: 0

  use_thin_strokes: true

draw_bold_text_with_bright_colors: true

# Colors (Tomorrow Night)
colors:
  primary:
    background: '#1d1f21'
    foreground: '#c5c8c6'
    dim_foreground: '#828482'
    bright_foreground: '#eaeaea'
    cursor:
    text: CellBackground
    cursor: CellForeground
  selection:
    text: CellBackground
    background: CellForeground

  # Normal colors
  normal:
    black:   '#1d1f21'
    red:     '#cc6666'
    green:   '#b5bd68'
    yellow:  '#f0c674'
    blue:    '#81a2be'
    magenta: '#b294bb'
    cyan:    '#8abeb7'
    white:   '#c5c8c6'

  # Bright colors
  bright:
    black:   '#666666'
    red:     '#d54e53'
    green:   '#b9ca4a'
    yellow:  '#e7c547'
    blue:    '#7aa6da'
    magenta: '#c397d8'
    cyan:    '#70c0b1'
    white:   '#eaeaea'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  dim:
    black:   '#131415'
    red:     '#864343'
    green:   '#777c44'
    yellow:  '#9e824c'
    blue:    '#556a7d'
    magenta: '#75617b'
    cyan:    '#5b7d78'
    white:   '#828482'

bell:
  animation: EaseOutExpo
  duration: 1
  color: '#fafafa'
background_opacity: 0.97

selection:
#  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  style: Block

# Live config reload (changes require restart)
live_config_reload: true

shell:
  program: /bin/zsh
  args:
    - --login
    - -c
    - "tmux"

alt_send_esc: false
mouse:

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  url:
    launcher:
      program: open

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

key_bindings:

  - { key: 27, mods: Shift|Control, chars: "\x1b[18;2~" } # VIM: nnoremap <S-F7> :tabnext<CR>
  - { key: 26, mods: Shift|Control, chars: "\x1b[17;2~" } # VIM: nnoremap <S-F6> :tabprevious<CR>

##GENERIC BINDINGS##
  # (macOS only)
  - { key: Key0,     mods: Control,            action: ResetFontSize    }
  - { key: Equals,   mods: Control,            action: IncreaseFontSize }
  - { key: Subtract, mods: Control,            action: DecreaseFontSize }
  - { key: V,        mods: Control,            action: PasteSelection   }
  - { key: C,        mods: Control,        action: Copy             }
  - { key: N,        mods: Control,        action: SpawnNewInstance }

  # Meta key support
  # taken from https://github.com/jwilm/alacritty/issues/62#issuecomment-347552058
  - { key: A,         mods: Control,       chars: "\x1ba"                       }
  - { key: B,         mods: Control,       chars: "\x1bb"                       }
  - { key: C,         mods: Control,       chars: "\x1bc"                       }
  - { key: D,         mods: Control,       chars: "\x1bd"                       }
  - { key: E,         mods: Control,       chars: "\x1be"                       }
  - { key: F,         mods: Control,       chars: "\x1bf"                       }
  - { key: G,         mods: Control,       chars: "\x1bg"                       }
  - { key: H,         mods: Control,       chars: "\x1bh"                       }
  - { key: I,         mods: Control,       chars: "\x1bi"                       }
  - { key: J,         mods: Control,       chars: "\x1bj"                       }
  - { key: K,         mods: Control,       chars: "\x1bk"                       }
  - { key: L,         mods: Control,       chars: "\x1bl"                       }
  - { key: M,         mods: Control,       chars: "\x1bm"                       }
  - { key: N,         mods: Control,       chars: "\x1bn"                       }
  - { key: O,         mods: Control,       chars: "\x1bo"                       }
  - { key: P,         mods: Control,       chars: "\x1bp"                       }
  - { key: Q,         mods: Control,       chars: "\x1bq"                       }
  - { key: R,         mods: Control,       chars: "\x1br"                       }
  - { key: S,         mods: Control,       chars: "\x1bs"                       }
  - { key: T,         mods: Control,       chars: "\x1bt"                       }
  - { key: U,         mods: Control,       chars: "\x1bu"                       }
  - { key: V,         mods: Control,       chars: "\x1bv"                       }
  - { key: W,         mods: Control,       chars: "\x1bw"                       }
  - { key: X,         mods: Control,       chars: "\x1bx"                       }
  - { key: Y,         mods: Control,       chars: "\x1by"                       }
  - { key: Z,         mods: Control,       chars: "\x1bz"                       }
  - { key: A,         mods: Control|Shift, chars: "\x1bA"                       }
  - { key: B,         mods: Control|Shift, chars: "\x1bB"                       }
  - { key: C,         mods: Control|Shift, chars: "\x1bC"                       }
  - { key: D,         mods: Control|Shift, chars: "\x1bD"                       }
  - { key: E,         mods: Control|Shift, chars: "\x1bE"                       }
  - { key: F,         mods: Control|Shift, chars: "\x1bF"                       }
  - { key: G,         mods: Control|Shift, chars: "\x1bG"                       }
  - { key: H,         mods: Control|Shift, chars: "\x1bH"                       }
  - { key: I,         mods: Control|Shift, chars: "\x1bI"                       }
  - { key: J,         mods: Control|Shift, chars: "\x1bJ"                       }
  - { key: K,         mods: Control|Shift, chars: "\x1bK"                       }
  - { key: L,         mods: Control|Shift, chars: "\x1bL"                       }
  - { key: M,         mods: Control|Shift, chars: "\x1bM"                       }
  - { key: N,         mods: Control|Shift, chars: "\x1bN"                       }
  - { key: O,         mods: Control|Shift, chars: "\x1bO"                       }
  - { key: P,         mods: Control|Shift, chars: "\x1bP"                       }
  - { key: Q,         mods: Control|Shift, chars: "\x1bQ"                       }
  - { key: R,         mods: Control|Shift, chars: "\x1bR"                       }
  - { key: S,         mods: Control|Shift, chars: "\x1bS"                       }
  - { key: T,         mods: Control|Shift, chars: "\x1bT"                       }
  - { key: U,         mods: Control|Shift, chars: "\x1bU"                       }
  - { key: V,         mods: Control|Shift, chars: "\x1bV"                       }
  - { key: W,         mods: Control|Shift, chars: "\x1bW"                       }
  - { key: X,         mods: Control|Shift, chars: "\x1bX"                       }
  - { key: Y,         mods: Control|Shift, chars: "\x1bY"                       }
  - { key: Z,         mods: Control|Shift, chars: "\x1bZ"                       }
  - { key: Key1,      mods: Control,       chars: "\x1b1"                       }
  - { key: Key2,      mods: Control,       chars: "\x1b2"                       }
  - { key: Key3,      mods: Control,       chars: "\x1b3"                       }
  - { key: Key4,      mods: Control,       chars: "\x1b4"                       }
  - { key: Key5,      mods: Control,       chars: "\x1b5"                       }
  - { key: Key6,      mods: Control,       chars: "\x1b6"                       }
  - { key: Key7,      mods: Control,       chars: "\x1b7"                       }
  - { key: Key8,      mods: Control,       chars: "\x1b8"                       }
  - { key: Key9,      mods: Control,       chars: "\x1b9"                       }
  - { key: Key0,      mods: Control,       chars: "\x1b0"                       }
  - { key: Space,     mods: Control,       chars: "\x00"                        } # Ctrl + Space
  - { key: Grave,     mods: Control,       chars: "\x1b`"                       } # Control + `
  - { key: Grave,     mods: Control|Shift, chars: "\x1b~"                       } # Control + ~
  - { key: Period,    mods: Control,       chars: "\x1b."                       } # Control + .
  - { key: Key8,      mods: Control|Shift, chars: "\x1b*"                       } # Control + *
  - { key: Key3,      mods: Control|Shift, chars: "\x1b#"                       } # Control + #
  - { key: Period,    mods: Control|Shift, chars: "\x1b>"                       } # Control + >
  - { key: Comma,     mods: Control|Shift, chars: "\x1b<"                       } # Control + <
  - { key: Minus,     mods: Control|Shift, chars: "\x1b_"                       } # Control + _
  - { key: Key5,      mods: Control|Shift, chars: "\x1b%"                       } # Control + %
  - { key: Key6,      mods: Control|Shift, chars: "\x1b^"                       } # Control + ^
  - { key: Backslash, mods: Control,       chars: "\x1b\\"                      } # Control + \
  - { key: Backslash, mods: Control|Shift, chars: "\x1b|"                       } # Control + |

# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#   - SearchBackward
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#   - SearchNext
#   - SearchPrevious
#   - SearchStart
#   - SearchEnd
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
#key_bindings:
  #- { key: Paste,                                action: Paste          }
  #- { key: Copy,                                 action: Copy           }
  #- { key: L,         mods: Control,             action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  #- { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  #- { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  #- { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  #- { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  #- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  #- { key: Escape,                      mode: Vi, action: ClearSelection          }
  #- { key: I,                           mode: Vi, action: ScrollToBottom          }
  #- { key: I,                           mode: Vi, action: ToggleViMode            }
  #- { key: C,      mods: Control,       mode: Vi, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi, action: Copy                    }
  #- { key: Y,                           mode: Vi, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi, action: ClearSelection          }
  #- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi, action: Open                    }
  #- { key: K,                           mode: Vi, action: Up                      }
  #- { key: J,                           mode: Vi, action: Down                    }
  #- { key: H,                           mode: Vi, action: Left                    }
  #- { key: L,                           mode: Vi, action: Right                   }
  #- { key: Up,                          mode: Vi, action: Up                      }
  #- { key: Down,                        mode: Vi, action: Down                    }
  #- { key: Left,                        mode: Vi, action: Left                    }
  #- { key: Right,                       mode: Vi, action: Right                   }
  #- { key: Key0,                        mode: Vi, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  #- { key: B,                           mode: Vi, action: SemanticLeft            }
  #- { key: W,                           mode: Vi, action: SemanticRight           }
  #- { key: E,                           mode: Vi, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
  #- { key: Slash,                       mode: Vi, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
  #- { key: N,                           mode: Vi, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

  # (Windows, Linux, and BSD only)
  #- { key: V,        mods: Control|Shift,           action: Paste            }
  #- { key: C,        mods: Control|Shift,           action: Copy             }
  #- { key: F,        mods: Control|Shift,           action: SearchForward    }
  #- { key: B,        mods: Control|Shift,           action: SearchBackward   }
  #- { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
  #- { key: Insert,   mods: Shift,                   action: PasteSelection   }
  #- { key: Key0,     mods: Control,                 action: ResetFontSize    }
  #- { key: Equals,   mods: Control,                 action: IncreaseFontSize }
  #- { key: Add,      mods: Control,                 action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,                 action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,                 action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,      mods: Command, mode: ~Vi, chars: "\x0c"            }
  #- { key: Key0,   mods: Command,            action: ResetFontSize    }
  #- { key: Equals, mods: Command,            action: IncreaseFontSize }
  #- { key: Add,    mods: Command,            action: IncreaseFontSize }
  #- { key: Minus,  mods: Command,            action: DecreaseFontSize }
  #- { key: K,      mods: Command,            action: ClearHistory     }
  #- { key: V,      mods: Command,            action: Paste            }
  #- { key: C,      mods: Command,            action: Copy             }
  #- { key: C,      mods: Command, mode: Vi,  action: ClearSelection   }
  #- { key: H,      mods: Command,            action: Hide             }
  #- { key: M,      mods: Command,            action: Minimize         }
  #- { key: Q,      mods: Command,            action: Quit             }
  #- { key: W,      mods: Command,            action: Quit             }
  #- { key: N,      mods: Command,            action: SpawnNewInstance }
  #- { key: F,      mods: Command|Control,    action: ToggleFullscreen }
  #- { key: F,      mods: Command,            action: SearchForward    }
  #- { key: B,      mods: Command,            action: SearchBackward   }

debug:
  render_timer: false # Display the time it takes to redraw each frame.
  persistent_logging: true
  log_level: Warn
  print_events: false
